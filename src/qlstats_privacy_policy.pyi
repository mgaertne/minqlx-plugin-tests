from threading import Thread

from requests import Response

from minqlx import Player, AbstractChannel, Plugin

SteamId = int

COLORED_QLSTATS_INSTRUCTIONS: str


# noinspection PyPep8Naming
class qlstats_privacy_policy(Plugin):
    plugin_enabled: bool
    kick_players: bool
    allowed_privacy: list[str]
    max_num_join_attempts: int
    exceptions: set[SteamId]
    join_attempts: dict[SteamId, int]
    connectthreads: dict[SteamId, ConnectThread]

    def __init__(self) -> None: ...
    def check_balance_plugin_loaded(self) -> bool: ...
    def check_for_right_version_of_balance_plugin(self) -> bool: ...
    def check_for_correct_balance_plugin(self) -> bool: ...
    def handle_player_connect(self, player: Player) -> int | str: ...
    def callback_connect(self, players: dict[SteamId, str], _channel: AbstractChannel) -> None: ...
    def colored_qlstats_instructions(self) -> str: ...
    def delayed_kick(self, sid: SteamId, reason: str) -> None: ...
    def handle_player_disconnect(self, player: Player, _reason: str) -> None: ...
    def handle_team_switch_attempt(self, player: Player, old: str, new: str) -> int: ...
    def cmd_policy_exception(self, player: Player, msg: str, channel: AbstractChannel) -> int: ...
    def cmd_switch_plugin(self, _player: Player, msg: str, channel: AbstractChannel) -> int: ...
    def disable_policy_check(self, channel: AbstractChannel) -> None: ...
    def enable_policy_check(self, channel: AbstractChannel) -> None: ...
    def remove_thread(self, sid: SteamId) -> None: ...


class ConnectThread(Thread):
    _balance_api: str
    _steam_id: SteamId
    _result: Response | None

    def __init__(self, steam_id: SteamId, balance_api: str) -> None: ...
    def run(self) -> None: ...
