from logging import Logger
from typing import Iterable

from minqlx import Plugin, AbstractChannel, Player, AbstractDummyPlayer

SteamId = int

APPLICATION_GAMES_KEY: str
ABOVE_GAMES_KEY: str

SUPPORTED_GAMETYPES: Iterable[str]

# noinspection PyPep8Naming
class merciful_elo_limit(Plugin):
    min_elo: int
    application_games: int
    above_games: int
    banned_days: int

    tracked_player_sids: list[SteamId]
    announced_player_elos: list[SteamId]

    def __init__(self) -> None: ...
    def handle_map_change(self, _mapname: str, _factory: str) -> None: ...
    def handle_player_connect(self, player: Player) -> None: ...
    def fetch_elos_of_players(self, players: list[Player]) -> None: ...
    def handle_round_countdown(self, _round_number: int) -> None: ...
    def callback_ratings(
        self, _players: list[Player], _channel: AbstractChannel
    ) -> None: ...
    def handle_player_after_fetching_ratings(self, player: Player) -> None: ...
    def is_player_in_exception_list(self, player: Player) -> bool: ...
    def get_value_from_db_or_zero(self, key: str) -> int: ...
    def elo_for_player(self, player: Player) -> int | None: ...
    def warn_lowelo_player(self, player: Player) -> None: ...
    def blink2(
        self, player: Player, message: str, count: int = ..., interval: float = ...
    ) -> None: ...
    def handle_round_start(self, _round_number: int) -> None: ...
    def handle_player_at_round_start(self, player: Player) -> None: ...
    def cmd_mercis(
        self, _player: Player, _msg: str, channel: AbstractChannel
    ) -> None: ...
    def identify_reply_channel(self, channel: AbstractChannel) -> AbstractChannel: ...

class DummyChannel(AbstractChannel):
    logger: Logger

    def __init__(self, logger: Logger) -> None: ...
    def reply(self, msg: str, limit: int = ..., delimiter: str = ...) -> None: ...

class DummyOwner(AbstractDummyPlayer):
    logger: Logger

    def __init__(self, logger: Logger) -> None: ...
    @property
    def steam_id(self) -> SteamId | None: ...
    @property
    def channel(self) -> AbstractChannel: ...
    def tell(self, msg: str, **_kwargs) -> None: ...
