from typing import TYPE_CHECKING

from minqlx import Plugin

if TYPE_CHECKING:
    from minqlx import Player, CancellableEventReturn, GameStartData, RoundEndData

SteamId = int

def other_team(team: str) -> str: ...
def color_format_team(team: str) -> str: ...
def damage_this_round(damages: dict[SteamId, int], steam_id: int) -> int: ...

# noinspection PyPep8Naming
class spec_rotation(Plugin):
    stats_snapshot: dict[SteamId, int]
    scheduled_switches: list[SteamId]
    spec_rotation: list[SteamId]
    team_score_snapshots: dict[SteamId, int]
    score_snapshots: dict[SteamId, int]
    in_countdown: bool

    def __init__(self) -> None: ...
    def handle_map_change(self, _mapname: str, _factory: str) -> None: ...
    def handle_client_command(self, player: Player, command: str) -> None: ...
    def spec_rotation_plugin_is_enabled(self) -> bool: ...
    def handle_team_switch_attempt(
        self, player: Player, _old_team: str, new_team: str
    ) -> CancellableEventReturn: ...
    def handle_team_switch(
        self, player: Player, old_team: str, new_team: str
    ) -> None: ...
    def switch_player(
        self, steam_id: SteamId, team: str, msg: str | None = ...
    ) -> None: ...
    def handle_player_loaded(self, player: Player) -> None: ...
    def handle_player_disconnect(self, player: Player, _reason: str) -> None: ...
    def handle_game_countdown(self) -> None: ...
    def handle_game_start(self, _data: GameStartData) -> None: ...
    def handle_round_countdown(self, _round_number: int) -> None: ...
    def find_player_to_spec(self, players: list[Player]) -> Player: ...
    def find_games_here(self, player: Player) -> int: ...
    def handle_round_start(self, _round_number: int) -> None: ...
    def handle_round_end(self, data: RoundEndData) -> None: ...
    def print_scores(self) -> None: ...
    def calculate_damage_deltas(self) -> dict[SteamId, int]: ...
    def player_to_replace(self, losing_team: str) -> Player: ...
